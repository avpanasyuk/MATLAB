function [methodinfo,structs,enuminfo]=bwtekusb;
%BWTEKUSB Create structures to define interfaces found in 'bwtekusb'.

%This function was generated by loadlibrary.m parser version 1.1.6.17 on Tue Jan 30 01:11:43 2007
%perl options:'bwtekusb.i -outfile=bwtekusb.m'
ival={cell(1,0)}; % change 0 to the actual number of functions to preallocate the data.
fcns=struct('name',ival,'calltype',ival,'LHS',ival,'RHS',ival,'alias',ival);
structs=[];enuminfo=[];fcnNum=1;
% extern " C "  int _stdcall bwtekTestUSB ( int nUSBType , int nPixelNo , int nInputMode , int nChannel , void * pExtraData ); 
fcns.name{fcnNum}='bwtekTestUSB'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32', 'int32', 'int32', 'voidPtr'};fcnNum=fcnNum+1;
% extern " C "  int _stdcall bwtekSetTimeUSB ( long lTime , int nChannel ); 
fcns.name{fcnNum}='bwtekSetTimeUSB'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32'};fcnNum=fcnNum+1;
% extern " C "  int _stdcall bwtekDataReadUSB ( int nTriggerMode , unsigned short * pArray , int nChannel ); 
fcns.name{fcnNum}='bwtekDataReadUSB'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'uint16Ptr', 'int32'};fcnNum=fcnNum+1;
% extern " C "  int _stdcall bwtekCloseUSB ( int nChannel ); 
fcns.name{fcnNum}='bwtekCloseUSB'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
% extern " C " int _stdcall bwtekTestUSB ( int nUSBTiming , int nPixelNo , int nInputMode , int nchannel , int pParam ); 
fcns.name{fcnNum}='bwtekTestUSB'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32', 'int32', 'int32', 'int32'};fcnNum=fcnNum+1;
% extern " C " int _stdcall bwtekSetTimingsUSB ( long lTriggerExit , int nMultiple , int nChannel ); 
fcns.name{fcnNum}='bwtekSetTimingsUSB'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32', 'int32'};fcnNum=fcnNum+1;
% extern " C " int _stdcall bwtekPolyFit ( double * x , double * y , int const numPts , double * coefs , int const order ); 
fcns.name{fcnNum}='bwtekPolyFit'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'doublePtr', 'doublePtr', 'int32', 'doublePtr', 'int32'};fcnNum=fcnNum+1;
% extern " C " void _stdcall bwtekPolyCalc ( double * coefs , int const order , int const x , double * y ); 
fcns.name{fcnNum}='bwtekPolyCalc'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'doublePtr', 'int32', 'int32', 'doublePtr'};fcnNum=fcnNum+1;
methodinfo=fcns;